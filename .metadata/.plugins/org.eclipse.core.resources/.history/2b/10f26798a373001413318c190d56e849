package assignment8New;

import java.io.BufferedInputStream;
import java.io.IOException;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;


public class AudioHeader {
	static boolean DEBUG=Audio.DEBUG;
	String fileName;

	String format;
	long sampleRate;
	int bitePerSample;
	int numChannels;
	int audioLength;
	private String chunkdescriptor;
	private BufferedInputStream bis;
	private long chunksize;
	private String waveflag;
	private String fmtsubchunk;
	private long subchunk1size;
	private int audioformat;
	private long byterate;
	private int blockalign;
	private String datasubchunk;
	private long subchunk2size;
	private int len;
	
	
	private AudioHeader(String fileName,String format,int nc,
			int sampleRate,int bps,int audioLength){
		this.fileName=fileName;
		this.format=format;
		this.numChannels=nc;
		this.sampleRate=sampleRate;
		this.bitePerSample=bps;
		this.audioLength=audioLength;
		
	}
	

	public String getFileName() {
		return fileName;
	}


	public AudioHeader(BufferedInputStream bis,String fileName) {
		this.bis=bis;
		this.chunkdescriptor = readString(WaveConstants.LENCHUNKDESCRIPTOR);		
		if (!chunkdescriptor.endsWith("RIFF"))
			throw new IllegalArgumentException("RIFF miss, " + fileName + " is not a wave file.");

		this.chunksize = readLong();
		this.waveflag = readString(WaveConstants.LENWAVEFLAG);
		if (!waveflag.endsWith("WAVE"))
			throw new IllegalArgumentException("WAVE miss, " + fileName + " is not a wave file.");

		this.fmtsubchunk = readString(WaveConstants.LENFMTSUBCHUNK);
		if (!fmtsubchunk.endsWith("fmt "))
			throw new IllegalArgumentException("fmt miss, " + fileName + " is not a wave file.");

		this.subchunk1size = readLong();
		this.audioformat = readInt();
		this.numChannels = readInt();
		this.sampleRate = readLong();
		this.byterate = readLong();
		this.blockalign = readInt();
		this.bitePerSample = readInt();

		this.datasubchunk = readString(WaveConstants.LENDATASUBCHUNK);
		if (!datasubchunk.endsWith("data"))
			throw new IllegalArgumentException("data miss, " + fileName + " is not a wave file.");
		this.subchunk2size = readLong();

		this.len = (int) (this.subchunk2size / (this.bitePerSample / 8) / this.numChannels);
		this.audioLength=(int) (this.len/this.sampleRate);

	}


	// check audio file headline format
	public static AudioHeader getInstance(
			String fileName,byte[] bytes,int datasize) {
		String format="";
		int nc=0;
		int sampleRate;
		int bps;
		ByteBuffer byteBuffer = ByteBuffer.wrap(bytes);
		byteBuffer.order(ByteOrder.LITTLE_ENDIAN);
		//Check format = wave
		if (byteBuffer.get(8) != 87 || byteBuffer.get(9) != 65 ||
			bytes[10] != 86 || bytes[11] != 69) {
			if (DEBUG) { System.err.print("ERROR: NOT Wave Format"+"  "); }
			return null;		
		}
		format="wav";
		//Check audio format = PCM
		if (byteBuffer.get(20) != 1 || byteBuffer.get(21) != 0) {
			if (DEBUG) { System.err.print("ERROR: NOT PCM"+"  "); }
			return null;
		}
		//Check channels = stereo or Mono
		if (byteBuffer.get(22) == 2 && byteBuffer.get(23) == 0) {
			nc=2;
		}else if(byteBuffer.get(22)==1 && byteBuffer.get(23)==0){
			nc=1;
		}else{
			if(DEBUG){System.err.print(
					"ERROR: Incorrect num of channels"+"  ");}
			return null;
		}
		//Check sample rate is 44.1 kHz
		sampleRate=byteBuffer.getInt(24);
		if(sampleRate!=11025 && sampleRate!=22050 
				&& sampleRate!=44100 && sampleRate!=48000){
			if(DEBUG){
				System.err.print(
						"ERROR: Incorrect sample rate "+sampleRate+"  ");}
			return null;
		}
		//check BitsPerSample is 16
		bps=byteBuffer.getShort(34);
		if (bps != 16 && bps != 8) {
			if (DEBUG) {
				System.out.print(
						"ERROR: Incorrect bites per sample "+ bps+"  ");}
				return null;
		}
		int audioLength=0;
		audioLength=datasize/(sampleRate*nc*(bps/8));
		return new AudioHeader(fileName,format,nc,sampleRate,bps,audioLength);
	}
	//@overwrite
	public String toString(){
		StringBuilder sb = new StringBuilder();
		sb.append("Filename: "+this.fileName+"\n");
		sb.append("Audio Format: "+this.format+"\n");
		sb.append("Sample Rate: "+this.sampleRate+"\n");
		sb.append("Bites per Second: "+this.bitePerSample+"\n");
		sb.append("Number of Channels: "+this.numChannels+"\n");
		sb.append("Audio length: "+this.audioLength);
		sb.append('\n');
		return sb.toString();
	}

	
	private int readInt() {
		byte[] buf = new byte[2];
		int res = 0;
		try {
			if (bis.read(buf) != 2)
				throw new IOException("no more data!!!");
			res = (buf[0] & 0x000000FF) | (((int) buf[1]) << 8);
		} catch (IOException e) {
			e.printStackTrace();
		}
		return res;
	}

	private long readLong() {
		long res = 0;
		try {
			long[] l = new long[4];
			for (int i = 0; i < 4; ++i) {
				l[i] = bis.read();
				if (l[i] == -1) {
					throw new IOException("no more data!!!");
				}
			}
			res = l[0] | (l[1] << 8) | (l[2] << 16) | (l[3] << 24);
		} catch (IOException e) {
			e.printStackTrace();
		}
		return res;
	}

	private String readString(int len) {
		byte[] buf = new byte[len];
		try {
			if (bis.read(buf) != len)
				throw new IOException("no more data!!!");
		} catch (IOException e) {
			e.printStackTrace();
		}
		return new String(buf);
	}
	


	public long getSampleRate() {
		return sampleRate;
	}


	public int getBitePerSample() {
		return bitePerSample;
	}


	public String getChunkdescriptor() {
		return chunkdescriptor;
	}


	public BufferedInputStream getBis() {
		return bis;
	}


	public long getChunksize() {
		return chunksize;
	}


	public String getWaveflag() {
		return waveflag;
	}


	public String getFmtsubchunk() {
		return fmtsubchunk;
	}


	public long getSubchunk1size() {
		return subchunk1size;
	}


	public int getAudioformat() {
		return audioformat;
	}


	public long getByterate() {
		return byterate;
	}


	public int getBlockalign() {
		return blockalign;
	}


	public int getBitspersample() {
		return bitePerSample;
	}


	public String getDatasubchunk() {
		return datasubchunk;
	}


	public long getSubchunk2size() {
		return subchunk2size;
	}


	public int getLen() {
		return len;
	}


	public void setFormat(String format) {
		this.format = format;
	}


	public void setNumChannels(int numChannels) {
		this.numChannels = numChannels;
	}
}
