package assignment8;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;
/**
 * 
 * @author zhuoli
 * @purpose: comparator containers, 
 */


public class Comparator {
	ArrayList<Audio> container1=null;
	ArrayList<Audio> container2=null;
	
	HashMap<Long, String> containerHM=null;
	
	// contain files from args1 and files from args3
	public Comparator(String[] files1,String[] files2){
		container1=new ArrayList<Audio>();
		container2=new ArrayList<Audio>();
		fillContainerWithMultiThreads(container1,files1);
		fillContainerWithMultiThreads(container2,files2);
	}
	
	// utilize moltile-core process to fill container faster
	private void fillContainerWithMultiThreads(ArrayList<Audio> container,String[] files){
	      long begTest = new java.util.Date().getTime();
	      int nrOfProcessors = Runtime.getRuntime().availableProcessors();
	      ExecutorService eservice = Executors.newFixedThreadPool(nrOfProcessors);

	      for(String file : files){
	    	  eservice.execute(new ContainerThread(container,file));
	      }
	      eservice.shutdown();
	      try {
			eservice.awaitTermination(10, TimeUnit.SECONDS);
		} catch (InterruptedException e) {
		}
	      Double secs = new Double((new java.util.Date().getTime() - begTest)*0.001);
	      System.out.println("run time " + secs + " secs");
	}
	
	// compare all the files in each container against each other
	public void compare(){
		//special case when the second container only has 1 file, indicating
		//that we need to check that file against all the files in container1
		if (container2.size() == 1 && container1.size() > 1) {
		    fillHashMap(container1);
		    Audio audioFile = container2.get(0);
		    checkSong (audioFile);
		} else { 
			//check every file in container 1 against every file in container 2
		    fillHashMap(container2);
		    for (Audio audioFile : container1) {
		        checkSong(audioFile);
		    }
		}
	}
	
	
	

    private void fillHashMap(ArrayList<Audio> container) {
    	if(containerHM==null){
    		containerHM=new HashMap<Long, String> ();
    	}
        for (Audio audioFile : container) {
//            HashMap<Long, String> fileHashMap = audioFile.getHashMap();
//            containerHM.putAll(fileHashMap);
        }   
    }

}

class ContainerThread  implements Runnable {
	ArrayList<Audio> container;
	String file;
	public ContainerThread(ArrayList<Audio> container, String file){
		this.container=container;
		this.file=file;
	}
	@Override
	public void run() {
			Audio audio=null;
			audio = Audio.getInstance(file);
			if(audio!=null){
				synchronized(this.container){
					container.add(audio);
				}
			}
	}
}
	