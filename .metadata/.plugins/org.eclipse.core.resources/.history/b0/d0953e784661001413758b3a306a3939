package audio;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;

class WavAudio extends Audio{
	static boolean DEBUG = true;
	public WavAudio(String filePath) {
		super(filePath);
	}
	
	public static Audio getInstance(String filePath){
		return new WavAudio(filePath);
	}
	
	@Override
	// check audio file headline format
	int checkCDSpecs(byte[] bytes,int datasize,double[] sampleRate ,String[] format, 
			int[] bps,int[] nc) {
			ByteBuffer byteBuffer = ByteBuffer.wrap(bytes);
			byteBuffer.order(ByteOrder.LITTLE_ENDIAN);
			//Check format = wave
			if (byteBuffer.get(8) != 87 || byteBuffer.get(9) != 65 ||
					bytes[10] != 86 || bytes[11] != 69) {
				if (DEBUG) { System.err.println("ERROR: NOT Wave Format"); }
				return -1;
				
			}
			format[0]="wav";
			//Check audio format = PCM
			if (byteBuffer.get(20) != 1 || byteBuffer.get(21) != 0) {
				if (DEBUG) { System.err.println("ERROR: NOT PCM"); }
				return -1;
			}
			//Check channels = stereo or Mono
			if (byteBuffer.get(22) == 2 && byteBuffer.get(23) == 0) {
				nc[0]=2;
			}else if(byteBuffer.get(22)==1 && byteBuffer.get(23)==0){
				nc[0]=1;
			}else{
				if(DEBUG){System.err.println("ERROR: Incorrect num of channels");}
				return -1;
			}
			//Check sample rate is 44.1 kHz
			int sr=byteBuffer.getInt(24);
			if(sr!=11025 && sr!=22050 && sr!=44100 && sr!=48000){
				if(DEBUG){System.err.println("ERROR: Incorrect sample rate "+sr);}
				return -1;
			}
			sampleRate[0]=sr;
			//check BitsPerSample is 16
			int t=byteBuffer.getShort(34);
			if (t != 16 && t != 8) {
				if (DEBUG) {System.out.println("ERROR: Incorrect bites per sample "+ t);}
				return -1;
			}
			bps[0]=t;
			//check file size
			int subChunk2Size=byteBuffer.getInt(40);
			if(subChunk2Size!=datasize){
				if(DEBUG){System.out.println("Audio File data incomplete: "+
						subChunk2Size +" vs "+datasize);};
				return -1;
			}
			return 0;
	}
	@Override
	//Extract left channel bytes
	// GIVEN: nums of channel, bites per sample
	 byte[] extractLeftChannels(int numsOfChannel,int bps) {
		// subtract 44 head bytes, divide by numsOfChannel leaving one channel
		byte[] fileLeftChannel = new byte[(fileArray.length - 44) / numsOfChannel];
		if(bps==16){
			for(int i=0;i<fileLeftChannel.length/2;i++){
				fileLeftChannel[i*2]=fileArray[44+i*2*numsOfChannel];
				fileLeftChannel[i*2+1]=fileArray[44+i*2*numsOfChannel+1];
			}
		}else if(bps==8){
			for(int i=0;i<fileLeftChannel.length;i++){
				fileLeftChannel[i]=fileArray[44+i*numsOfChannel];
			}
		}else{
			if(DEBUG){System.err.println("ERROR: incorrect bps in extractLeftChannels "+bps);}
			return null;
		}
		return fileLeftChannel;
	}
	@Override
	//Converts byte arrays to double arrays so that they can be
	//passed through the FFT code
	 double[] convertToDoubles(byte[] fileLeftChannel,int bps) {
		double[] fileDouble=null;
//		ByteBuffer byteBuffer = ByteBuffer.wrap(fileLeftChannel);
		if(bps==16){
			fileDouble = new double[fileLeftChannel.length / 2];
			for(int i=0;i<fileDouble.length;i++){
				short t=(short) (fileLeftChannel[i*2]+fileLeftChannel[i*2+1]<<8);
				fileDouble[i]=t/32768.0;
			}
		}else if(bps==8){
			fileDouble = new double[fileLeftChannel.length];
			for(int i=0;i<fileDouble.length;i++){
				fileDouble[i]=0xff*fileLeftChannel[i]/125.0;
			}
		}else{
			if(DEBUG){System.err.println("ERROR: incorrect bps in convertToDoubles "+bps);}
			return null;
		}
		return fileDouble;
	}
	@Override
		// converts byte arrays to short int
	short[] convertToShort(byte[] fileLeftChannel,int bps){
			short[] array;
			if(bps==16){
				array = new short[fileLeftChannel.length / 2];
				for(int i=0;i<array.length;i++){
					short t=(short) (fileLeftChannel[i*2]+fileLeftChannel[i*2+1]<<8);
					array[i]=t;
				}
			}else if(bps==8){
				array = new short[fileLeftChannel.length];
				for(int i=0;i<array.length;i++){
					array[i]=fileLeftChannel[i];
				}
			}else{
				if(DEBUG){System.err.println("ERROR: incorrect bps in convertToShort "+bps);}
				return null;
			}
			return array;
		}
}
