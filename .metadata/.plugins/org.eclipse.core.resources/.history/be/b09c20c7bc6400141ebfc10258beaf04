package audio;

import java.io.IOException;
import java.util.ArrayList;
/**
 * 
 * @author zhuoli
 * @purpose: comparator containers, 
 */
public class Comparator {
	private static double THRESHOLD=30;
	private static int SECOND=2;
	ArrayList<Audio> container1=null;
	ArrayList<Audio> container2=null;
	public Comparator(String[] files1,String[] files2){
		container1=new ArrayList<Audio>();
		container2=new ArrayList<Audio>();
		fillContainer(container1,files1);
		fillContainer(container2,files2);
	}
	
	private void fillContainer(ArrayList<Audio> container,String[] files){
		for(String file : files){
			Audio audio=null;
			try {
				audio = Audio.getInstance(file);
			} catch (IOException e) {
				System.out.println("File open exception: "+file);
				// TODO Auto-generated catch block
				e.printStackTrace();
				continue;
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			if(audio==null){
				continue;
			}
			container.add(audio);
		}
	}
	public void compare(){
//		System.out.println(container1.size());
//		System.out.println(container2.size());
		for(Audio file1:container1){
			for(Audio file2:container2){
				if (isMatch(file1,file2)) {
					String msg="MATCH "+file1.getFileName()+" "+file2.getFileName();
					System.out.println(msg);
				} else {
				}
			}
		}
	}
	public static boolean isMatch(Audio file1, Audio file2){
		// fast method
		if(Math.abs(file1.getAudioLength()-file2.getAudioLength()) > SECOND){
			return false;
		}
//		else{
//			return TMSEMatch(file1,file2);
//		}
		// accurate method
		else{
			return MSEMatch(file1,file2);
		}
	}
	// fast match method
	private static boolean fastMatch(Audio file1, Audio file2){
		
	}
	// time zone MSE compare
	private static boolean TMSEMatch(Audio file1, Audio file2){
		int meanSquaredError=ComparatorAlgorithm.calculateTMSE(file1, file2);
		System.out.println("TMSE: "+meanSquaredError);
		return meanSquaredError < THRESHOLD;
	}
	// frequency zone MSE compare
	private static boolean MSEMatch(Audio file1, Audio file2){
		double meanSquaredError = ComparatorAlgorithm.calculateMSE(file1,file2);
		System.out.println("MSE: "+meanSquaredError);
		return meanSquaredError < THRESHOLD;
		
	}
}
